/*
   Generated by EX4-TO-MQ4 decompiler LITE V4.0.417.5 [-]
   Website: https://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2012, PimpMyEA.com"
#property link      "http://www.pimpmyea.com"

//#include <stdlib.mqh>
#import "stdlib.ex4"
   string ErrorDescription(int a0);
#import "wininet.dll"
   int InternetOpenA(string a0, int a1, string a2, string a3, int a4);
   int InternetOpenUrlA(int a0, string a1, string a2, int a3, int a4, int a5);
   int InternetReadFile(int a0, string a1, int a2, int& a3[]);
   int InternetCloseHandle(int a0);
#import

bool gi_76 = FALSE;
string gs_80;
int gi_88 = 0;
int gi_92 = 1;
string gs_96;
int gi_104 = 0;
int gi_108 = 0;
int gi_112 = 0;
string gs_116;
int gia_124[1];
string gs_132 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
int gia_140[64] = {65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47};
int gia_144[1];
bool gi_148 = FALSE;
extern string e_mail = "";
extern double lot_size = 0.01;
extern double target_profit = 10.0;
bool gi_176 = TRUE;
double gd_180 = 3.0;
extern int minimum_step = 20;
extern bool stop_after_close = FALSE;
extern bool trend_following = TRUE;
extern bool closeby_enabled = TRUE;
extern bool on_hold = FALSE;
extern bool show_next_trades = TRUE;
extern bool show_open_trades = TRUE;
extern bool show_alert = FALSE;
extern bool play_sound = FALSE;
extern string comment = "ReticoloFX_Basket_USD";
double gd_232 = 1.0;
int gi_240 = 30;
int gi_244 = PERIOD_H4;
int gi_248 = 30;
bool gi_252 = TRUE;
int gi_256 = 1;
double gd_260 = 5.0;
int gi_268;
double gd_272;
double gd_280;
double gd_304;
double gd_312;
double gd_320;
double gd_328;
double gd_336;
int gi_360;
int gi_364;
int gi_368;
bool gi_372 = FALSE;
bool gi_376 = FALSE;
string gs_380;
string gs_388;
double gd_396 = 0.0;
double gd_404 = 0.0;
int gi_412;
string gsa_416[];
string gs_420;
bool gi_428 = FALSE;
string gs_432;
string gs_440;
int gia_448[];
int gia_452[];
int gi_456 = SteelBlue;
datetime gt_460;

int init() {
   gi_412 = f0_19("ReticoloFX_Basket_USD");
   string ls_0 = gi_412;
   GlobalVariableDel(ls_0);
   GlobalVariableDel(ls_0 + "_" + Symbol() + "_ASK");
   GlobalVariableDel(ls_0 + "_" + Symbol() + "_BID");
   gs_380 = ls_0 + "_CLOSE";
   gs_388 = ls_0 + "_MAXDD";
   if (!GlobalVariableCheck(gs_380)) GlobalVariableSet(gs_380, 0);
   if (!GlobalVariableCheck(gs_388)) GlobalVariableSet(gs_388, 0);
   gi_268 = Digits;
   if (gi_268 == 3 || gi_268 == 5) {
      gd_272 = 10.0 * Point;
      gd_280 = 10;
   } else {
      gd_272 = Point;
      gd_280 = 1;
   }
   gs_420 = StringSubstr(Symbol(), 6, 0);
   ArrayResize(gsa_416, 7);
   gsa_416[0] = "AUDUSD" + gs_420;
   gsa_416[1] = "USDCAD" + gs_420;
   gsa_416[2] = "USDCHF" + gs_420;
   gsa_416[3] = "EURUSD" + gs_420;
   gsa_416[4] = "GBPUSD" + gs_420;
   gsa_416[5] = "USDJPY" + gs_420;
   gsa_416[6] = "NZDUSD" + gs_420;
   if (show_next_trades) {
      gs_432 = "ReticoloFX_Basket_USD" + "_" + Symbol() + "_NEXT_BUY";
      ObjectCreate(gs_432, OBJ_HLINE, 0, 0, 0);
      ObjectSet(gs_432, OBJPROP_COLOR, Blue);
      ObjectSet(gs_432, OBJPROP_STYLE, STYLE_DASH);
      gs_440 = "ReticoloFX_Basket_USD" + "_" + Symbol() + "_NEXT_SELL";
      ObjectCreate(gs_440, OBJ_HLINE, 0, 0, 0);
      ObjectSet(gs_440, OBJPROP_COLOR, Red);
      ObjectSet(gs_440, OBJPROP_STYLE, STYLE_DASH);
   }
   if (gi_176 == FALSE) {
      gi_248 = gd_180;
      if (gi_248 <= 0) gi_248 = minimum_step;
   }
   return (0);
}

int deinit() {
   ObjectsDeleteAll();
   return (0);
}

int start() {
   string ls_0;
   int li_8;
   bool li_12;
   int li_20;
   int li_24;
   double ld_28;
   int li_36;
   int li_40;
   string ls_48;
   string ls_56;
   string ls_64;
   double ld_76;
   int li_84;
   /*
   if (f0_2()) {
      ls_0 = e_mail;
      if (IsDemo() == FALSE && TimeCurrent() > D'04.08.2012 08:00') ls_0 = e_mail + "@" + AccountNumber();
      li_8 = StrToInteger(f0_10(ls_0));
      if (li_8 == 1) gi_148 = TRUE;
      else gi_148 = FALSE;
   }
   if (gi_148 == FALSE) {
      Comment("\n Authorization Failed.\n Please contact us at\n http://www.pimpmyea.com");
      return (0);
   }
   */
   gi_148 = TRUE;
   if (gi_148) {
      li_12 = FALSE;
      for (int li_16 = 0; li_16 < ArraySize(gsa_416); li_16++) {
         if (gsa_416[li_16] == Symbol()) {
            li_12 = TRUE;
            break;
         }
      }
      if (li_12 == FALSE) {
         Comment("\nATTENTION PLEASE!" 
         + "\n " + "ReticoloFX_Basket_USD" + " is not made to work on " + Symbol());
         return (0);
      }
      if (gi_176 && Period() != gi_244) {
         Comment("\nATTENTION PLEASE!" 
         + "\n " + "ReticoloFX_Basket_USD" + " is made to run on 4H timeframe.");
         return (0);
      }
      if (gi_176 && Bars < gi_240) {
         Comment("\nATTENTION PLEASE!" 
         + "\n " + Symbol() + " has not enough historical data to run.");
         return (0);
      }
      li_20 = GlobalVariableGet(gs_380);
      gi_360 = f0_29(Symbol(), OP_BUY, gi_412);
      gi_364 = f0_29(Symbol(), OP_SELL, gi_412);
      if (gi_176) {
         gi_248 = iATR(Symbol(), gi_244, gi_240, 0) * gd_232 / gd_272;
         if (gi_248 < minimum_step) gi_248 = minimum_step;
      }
      if (gi_360 == 0 && gi_364 == 0) {
         gi_428 = stop_after_close;
         if (gd_396 == 0.0 || gd_404 == 0.0 || gi_428) {
            f0_3(Ask + gi_248 * gd_272);
            f0_7(Bid - gi_248 * gd_272);
         }
         if (li_20 == 0 && gi_372) {
            if (gi_428 == FALSE && on_hold == FALSE)
               if (f0_24(Symbol(), OP_BUY, lot_size, Ask, gd_260, 0, 0, f0_17(gi_360), gi_412, 0, Green) > 0) gi_372 = FALSE;
         }
         if (li_20 == 0 && gi_376) {
            if (gi_428 == FALSE && on_hold == FALSE)
               if (f0_24(Symbol(), OP_SELL, lot_size, Bid, gd_260, 0, 0, f0_17(gi_364), gi_412, 0, Red) > 0) gi_376 = FALSE;
         }
      }
      if (gi_360 > 0 && gi_364 == 0) {
         gd_312 = f0_1(gi_412);
         f0_3(gd_312 + gi_248 * gd_272);
         gd_328 = f0_30(gi_412);
         f0_7(gd_328 - (Ask - Bid) - gi_248 * 2 * gd_272);
      }
      if (gi_360 == 0 && gi_364 > 0) {
         gd_320 = f0_20(gi_412);
         f0_7(gd_320 - gi_248 * gd_272);
         gd_336 = f0_0(gi_412);
         f0_3(gd_336 + (Ask - Bid) + gi_248 * 2 * gd_272);
      }
      if (gi_360 > 0 && gi_364 > 0) {
         gd_312 = f0_1(gi_412);
         f0_3(gd_312 + gi_248 * gd_272);
         gd_320 = f0_20(gi_412);
         f0_7(gd_320 - gi_248 * gd_272);
      }
      if (li_20 == 0 && Ask >= gd_396)
         if (gi_428 == FALSE && on_hold == FALSE) f0_24(Symbol(), OP_BUY, lot_size, Ask, gd_260, 0, 0, f0_17(gi_360), gi_412, 0, Green);
      if (li_20 == 0 && Bid <= gd_404)
         if (gi_428 == FALSE && on_hold == FALSE) f0_24(Symbol(), OP_SELL, lot_size, Bid, gd_260, 0, 0, f0_17(gi_364), gi_412, 0, Red);
      li_24 = f0_16(OP_BUY, gi_412) + f0_16(OP_SELL, gi_412);
      if (li_24 == 0) GlobalVariableSet(gs_380, 0);
      ld_28 = f0_15(gi_412);
      li_36 = GlobalVariableGet(gs_380);
      if (li_36 == 0) gi_368 = f0_9(Symbol(), gi_412);
      if (ld_28 >= target_profit || li_36 > 0) {
         li_40 = 0;
         if (closeby_enabled) li_40 = f0_4(Symbol(), gi_412);
         else {
            li_40 = f0_26(Symbol(), 0, gi_412);
            li_40 += f0_26(Symbol(), 1, gi_412);
         }
         if (li_36 == 0) GlobalVariableSet(gs_380, 1);
         if (play_sound) PlaySound("alert.wav");
         if (show_alert && li_40 > 0) Alert("ReticoloFX_Basket_USD" + ": " + li_40 + " orders closed on " + Symbol() + "!");
         if (li_36 == 2) stop_after_close = TRUE;
         if (stop_after_close) gi_428 = TRUE;
         f0_3(0);
         f0_7(0);
         gi_372 = FALSE;
         gi_376 = FALSE;
         if (trend_following) {
            if (gi_368 == 0) gi_372 = TRUE;
            if (gi_368 == 1) gi_376 = TRUE;
         }
         for (int li_44 = 0; li_44 < 100; li_44++) {
            ls_48 = "ReticoloFX_Basket_USD" + "_" + Symbol() + "_TRADE_" + li_44;
            ObjectDelete(ls_48);
         }
      }
      gd_304 = GlobalVariableGet(gs_388);
      if (ld_28 < gd_304) {
         gd_304 = ld_28;
         GlobalVariableSet(gs_388, gd_304);
         Print("Max Floating DD: $", DoubleToStr(gd_304, 2));
      }
      for (int li_72 = 0; li_72 < Seconds() % 40; li_72++) ls_56 = ls_56 + "|";
      ls_64 = "RUNNING";
      if (stop_after_close) ls_64 = "RUNNING (stop after close)";
      if (on_hold) ls_64 = "RUNNING (on hold)";
      if (gi_428) ls_64 = "STOPPED";
      ld_76 = f0_25(Symbol(), gi_412);
      Comment("\n " + "ReticoloFX_Basket_USD" + " " + "v1.4" 
         + "\n by PimpMyEA.com", 
         "\n ======================", 
         "\n ", ls_56, 
         "\n ----------------------------------------------------", 
         "\n Status: ", ls_64, 
         "\n ----------------------------------------------------", 
         "\n " + Symbol() + " Spread: ", DoubleToStr((Ask - Bid) / gd_272, 2), 
         "\n " + Symbol() + " Step: ", DoubleToStr(gi_248, 2), 
         "\n " + Symbol() + " Next BUY @ ", DoubleToStr(gd_396, Digits), 
         "\n " + Symbol() + " Next Sell @ ", DoubleToStr(gd_404, Digits), 
         "\n ----------------------------------------------------", 
         "\n " + Symbol() + " Orders: BUY ", f0_29(Symbol(), OP_BUY, gi_412), "  \\  SELL ", f0_29(Symbol(), OP_SELL, gi_412), 
         "\n " + Symbol() + " Orders Value: $", DoubleToStr(ld_76, 2), 
         "\n " + Symbol() + " Closed Profit: $", DoubleToStr(f0_23(Symbol(), gi_412), 2), 
         "\n ----------------------------------------------------", 
         "\n TOTAL Orders: BUY ", f0_16(OP_BUY, gi_412), "  \\  SELL ", f0_16(OP_SELL, gi_412), 
         "\n TOTAL Orders Value: $", DoubleToStr(ld_28, 2), 
         "\n TOTAL Closed Profit: $", DoubleToStr(f0_8(gi_412), 2), 
         "\n TOTAL Max Floating DD: $", DoubleToStr(gd_304, 2), 
         "\n ----------------------------------------------------", 
         "\n Magic Number: ", gi_412, 
      "\n ----------------------------------------------------");
      gi_456 = SteelBlue;
      if (ld_76 > 0.0) gi_456 = SteelBlue;
      if (ld_76 < 0.0) gi_456 = SteelBlue;
      li_84 = 12;
      if (Seconds() % 5 == 0) {
         for (int li_88 = 0; li_88 < 8; li_88++) {
            for (int li_92 = 0; li_92 < li_84; li_92++) {
               ObjectDelete("background" + li_88 + li_92);
               ObjectDelete("background" + li_88 + ((li_92 + 1)));
               ObjectDelete("background" + li_88 + ((li_92 + 2)));
               ObjectCreate("background" + li_88 + li_92, OBJ_LABEL, 0, 0, 0);
               ObjectSetText("background" + li_88 + li_92, "n", 30, "Wingdings", gi_456);
               ObjectSet("background" + li_88 + li_92, OBJPROP_XDISTANCE, 20 * li_88);
               ObjectSet("background" + li_88 + li_92, OBJPROP_YDISTANCE, 23 * li_92 + 11);
            }
         }
         f0_3(gd_396);
         f0_7(gd_404);
         if (show_open_trades) f0_6(Symbol(), gi_412);
      }
   }
   return (0);
}

void f0_3(double ad_0) {
   gd_396 = ad_0;
   if (show_next_trades) ObjectSet(gs_432, OBJPROP_PRICE1, ad_0);
}

void f0_7(double ad_0) {
   gd_404 = ad_0;
   if (show_next_trades) ObjectSet(gs_440, OBJPROP_PRICE1, ad_0);
}

string f0_17(int ai_0) {
   if (StringLen(comment) > 0) return (comment + "_" + ((ai_0 + 1)));
   return ("");
}

int f0_21(int &aia_0[], string as_4, int ai_12, int ai_16) {
   ArrayResize(aia_0, 100);
   int li_20 = 0;
   int li_24 = OrdersTotal();
   if (li_24 > 0) {
      for (int li_28 = 0; li_28 < li_24; li_28++) {
         OrderSelect(li_28, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == as_4 && OrderType() == ai_12 && OrderMagicNumber() == ai_16) {
            aia_0[li_20] = OrderTicket();
            li_20++;
         }
      }
   }
   ArrayResize(aia_0, li_20);
   return (li_20);
}

int f0_29(string as_0, int ai_8, int ai_12) {
   int li_16 = 0;
   int li_20 = OrdersTotal();
   if (li_20 > 0) {
      for (int li_24 = 0; li_24 < li_20; li_24++) {
         OrderSelect(li_24, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == as_0 && OrderType() == ai_8 && OrderMagicNumber() == ai_12) li_16++;
      }
   }
   return (li_16);
}

int f0_6(string as_0, int ai_8) {
   string ls_24;
   bool li_12 = FALSE;
   int li_16 = OrdersTotal();
   if (li_16 > 0) {
      for (int li_20 = 0; li_20 < li_16; li_20++) {
         OrderSelect(li_20, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == as_0 && OrderMagicNumber() == ai_8) {
            ls_24 = "ReticoloFX_Basket_USD" + "_" + Symbol() + "_TRADE_" + li_20;
            if (ObjectFind(ls_24) == -1) {
               ObjectCreate(ls_24, OBJ_HLINE, 0, 0, 0);
               ObjectSet(ls_24, OBJPROP_COLOR, Yellow);
               ObjectSet(ls_24, OBJPROP_STYLE, STYLE_DASHDOT);
            }
            ObjectSet(ls_24, OBJPROP_PRICE1, OrderOpenPrice());
         }
      }
   }
   return (li_12);
}

int f0_16(int ai_0, int ai_4) {
   int li_8 = 0;
   int li_12 = OrdersTotal();
   if (li_12 > 0) {
      for (int li_16 = 0; li_16 < li_12; li_16++) {
         OrderSelect(li_16, SELECT_BY_POS, MODE_TRADES);
         if (OrderType() == ai_0 && OrderMagicNumber() == ai_4) li_8++;
      }
   }
   return (li_8);
}

int f0_9(string as_0, int ai_8) {
   int li_12 = -1;
   int li_16 = OrdersTotal();
   if (li_16 > 0) {
      for (int li_20 = 0; li_20 < li_16; li_20++) {
         OrderSelect(li_20, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == as_0 && OrderMagicNumber() == ai_8) li_12 = OrderType();
      }
   }
   return (li_12);
}

double f0_15(int ai_0) {
   double ld_4 = 0;
   int li_12 = OrdersTotal();
   if (li_12 > 0) {
      for (int li_16 = 0; li_16 < li_12; li_16++) {
         OrderSelect(li_16, SELECT_BY_POS, MODE_TRADES);
         if (OrderMagicNumber() == ai_0) ld_4 += OrderProfit() + OrderSwap() + OrderCommission();
      }
   }
   return (ld_4);
}

double f0_25(string as_0, int ai_8) {
   double ld_12 = 0;
   int li_20 = OrdersTotal();
   if (li_20 > 0) {
      for (int li_24 = 0; li_24 < li_20; li_24++) {
         OrderSelect(li_24, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == as_0 && OrderMagicNumber() == ai_8) ld_12 += OrderProfit() + OrderSwap() + OrderCommission();
      }
      return (ld_12);
   }
   return (0.0);
}

int f0_27(int aia_0[], int aia_4[]) {
   int li_8 = 0;
   int li_12 = ArraySize(aia_0);
   int li_16 = ArraySize(aia_4);
   for (int li_20 = 0; li_20 < MathMax(li_12, li_16); li_20++) {
      if (li_20 < li_12 && li_20 < li_16) {
         if (f0_18(aia_0[li_20], aia_4[li_20], Yellow)) li_8 += 2;
      } else {
         if (li_20 < li_12) {
            OrderSelect(aia_0[li_20], SELECT_BY_TICKET, MODE_TRADES);
            if (f0_14(OrderTicket(), OrderLots(), Bid, gd_260, Blue)) li_8++;
         }
         if (li_20 < li_16) {
            OrderSelect(aia_4[li_20], SELECT_BY_TICKET, MODE_TRADES);
            if (f0_14(OrderTicket(), OrderLots(), Ask, gd_260, Red)) li_8++;
         }
      }
   }
   return (li_8);
}

int f0_12(string as_0, int ai_8, int ai_12) {
   int li_16 = 0;
   if (OrdersTotal() > 0) {
      for (int li_20 = OrdersTotal(); li_20 >= 0; li_20--) {
         OrderSelect(li_20, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == as_0 && OrderType() == ai_8 && OrderMagicNumber() == ai_12) {
            if (OrderType() == OP_BUY)
               if (f0_14(OrderTicket(), OrderLots(), Bid, gd_260, Blue)) li_16++;
            if (OrderType() == OP_SELL)
               if (f0_14(OrderTicket(), OrderLots(), Ask, gd_260, Red)) li_16++;
         }
      }
   }
   return (li_16);
}

int f0_26(string as_0, int ai_8, int ai_12) {
   for (int li_16 = 0; f0_29(Symbol(), ai_8, ai_12) > 0; li_16 += f0_12(Symbol(), ai_8, ai_12)) RefreshRates();
   return (li_16);
}

int f0_4(string as_0, int ai_8) {
   for (int li_12 = 0; f0_21(gia_448, Symbol(), OP_BUY, ai_8) + f0_21(gia_452, Symbol(), OP_SELL, ai_8) > 0; li_12 += f0_27(gia_448, gia_452)) RefreshRates();
   return (li_12);
}

double f0_8(int ai_0) {
   double ld_4 = 0;
   int li_12 = OrdersHistoryTotal();
   if (li_12 > 0) {
      for (int li_16 = 0; li_16 < li_12; li_16++) {
         OrderSelect(li_16, SELECT_BY_POS, MODE_HISTORY);
         if (OrderMagicNumber() == ai_0) ld_4 += OrderProfit() + OrderSwap() + OrderCommission();
      }
      return (ld_4);
   }
   return (0.0);
}

double f0_23(string as_0, int ai_8) {
   double ld_12 = 0;
   int li_20 = OrdersHistoryTotal();
   if (li_20 > 0) {
      for (int li_24 = 0; li_24 < li_20; li_24++) {
         OrderSelect(li_24, SELECT_BY_POS, MODE_HISTORY);
         if (OrderSymbol() == as_0 && OrderMagicNumber() == ai_8) ld_12 += OrderProfit() + OrderSwap() + OrderCommission();
      }
      return (ld_12);
   }
   return (0.0);
}

double f0_1(int ai_0) {
   double ld_4 = 0;
   int li_12 = OrdersTotal();
   if (li_12 > 0) {
      for (int li_16 = 0; li_16 < li_12; li_16++) {
         OrderSelect(li_16, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == Symbol() && OrderType() == OP_BUY || OrderType() == OP_BUYSTOP && OrderMagicNumber() == ai_0)
            if (OrderOpenPrice() > ld_4) ld_4 = OrderOpenPrice();
      }
      return (ld_4);
   }
   return (0.0);
}

double f0_20(int ai_0) {
   double ld_4 = 999999999;
   int li_12 = OrdersTotal();
   if (li_12 > 0) {
      for (int li_16 = 0; li_16 < li_12; li_16++) {
         OrderSelect(li_16, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == Symbol() && OrderType() == OP_SELL || OrderType() == OP_SELLSTOP && OrderMagicNumber() == ai_0)
            if (OrderOpenPrice() < ld_4) ld_4 = OrderOpenPrice();
      }
      return (ld_4);
   }
   return (0.0);
}

double f0_30(int ai_0) {
   double ld_4 = 999999999;
   int li_12 = OrdersTotal();
   if (li_12 > 0) {
      for (int li_16 = 0; li_16 < li_12; li_16++) {
         OrderSelect(li_16, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == Symbol() && OrderType() == OP_BUY || OrderType() == OP_BUYSTOP && OrderMagicNumber() == ai_0)
            if (OrderOpenPrice() < ld_4) ld_4 = OrderOpenPrice();
      }
      return (ld_4);
   }
   return (0.0);
}

double f0_0(int ai_0) {
   double ld_4 = 0;
   int li_12 = OrdersTotal();
   if (li_12 > 0) {
      for (int li_16 = 0; li_16 < li_12; li_16++) {
         OrderSelect(li_16, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == Symbol() && OrderType() == OP_SELL || OrderType() == OP_SELLSTOP && OrderMagicNumber() == ai_0)
            if (OrderOpenPrice() > ld_4) ld_4 = OrderOpenPrice();
      }
      return (ld_4);
   }
   return (0.0);
}

int f0_24(string as_0, int ai_8, double ad_12, double ad_20, int ai_28, double ad_32, double ad_40, string as_48 = "", int ai_56 = 0, int ai_60 = 0, color ai_64 = -1) {
   int li_68;
   int li_72;
   Print("orderSendReliable(" + as_0 + "," + ai_8 + "," + ad_12 + "," + ad_20 + "," + ai_28 + "," + ad_32 + "," + ad_40 + "," + as_48 + "," + ai_56 + "," + ai_60 + "," +
      ai_64 + ")");
   while (true) {
      if (IsStopped()) {
         Print("orderSendReliable(): Trading is stopped!");
         return (-1);
      }
      RefreshRates();
      if (ai_8 == OP_BUY) ad_20 = Ask;
      if (ai_8 == OP_SELL) ad_20 = Bid;
      if (!IsTradeContextBusy()) {
         li_68 = OrderSend(as_0, ai_8, ad_12, NormalizeDouble(ad_20, MarketInfo(as_0, MODE_DIGITS)), ai_28, NormalizeDouble(ad_32, MarketInfo(as_0, MODE_DIGITS)), NormalizeDouble(ad_40,
            MarketInfo(as_0, MODE_DIGITS)), as_48, ai_56, ai_60, ai_64);
         if (li_68 > 0) {
            Print("orderSendReliable(): Success! Ticket: " + li_68);
            return (li_68);
         }
         li_72 = GetLastError();
         if (f0_22(li_72)) Print("orderSendReliable(): Temporary Error: " + li_72 + " " + ErrorDescription(li_72) + ". waiting.");
         else {
            Print("orderSendReliable(): Permanent Error: " + li_72 + " " + ErrorDescription(li_72) + ". giving up.");
            return (-1);
         }
      } else Print("orderSendReliable(): Must wait for trade context");
      Sleep(MathRand() / 10);
   }
   return /*(WARN)*/;
}

int f0_14(int ai_0, double ad_4, double ad_12, int ai_20, color ai_24 = -1) {
   bool li_28;
   int li_32;
   Print("orderCloseReliable()");
   OrderSelect(ai_0, SELECT_BY_TICKET, MODE_TRADES);
   while (true) {
      if (IsStopped()) {
         Print("orderCloseReliable(): Trading is stopped!");
         return (0);
      }
      RefreshRates();
      if (OrderType() == OP_BUY) ad_12 = Bid;
      if (OrderType() == OP_SELL) ad_12 = Ask;
      if (!IsTradeContextBusy()) {
         li_28 = OrderClose(ai_0, ad_4, NormalizeDouble(ad_12, MarketInfo(OrderSymbol(), MODE_DIGITS)), ai_20, ai_24);
         if (li_28) {
            Print("orderCloseReliable(): Success!");
            return (1);
         }
         li_32 = GetLastError();
         if (f0_22(li_32)) Print("orderCloseReliable(): Temporary Error: " + li_32 + " " + ErrorDescription(li_32) + ". waiting.");
         else {
            Print("orderCloseReliable(): Permanent Error: " + li_32 + " " + ErrorDescription(li_32) + ". giving up.");
            return (0);
         }
      } else Print("orderCloseReliable(): Must wait for trade context");
      Sleep(MathRand() / 10);
   }
   return /*(WARN)*/;
}

int f0_18(int ai_0, int ai_4, color ai_8 = -1) {
   bool li_12;
   int li_16;
   Print("orderCloseByReliable()");
   while (true) {
      if (IsStopped()) {
         Print("orderCloseByReliable(): Trading is stopped!");
         return (0);
      }
      if (!IsTradeContextBusy()) {
         li_12 = OrderCloseBy(ai_0, ai_4, ai_8);
         if (li_12) {
            Print("orderCloseByReliable(): Success!");
            return (1);
         }
         li_16 = GetLastError();
         if (f0_22(li_16)) Print("orderCloseByReliable(): Temporary Error: " + li_16 + " " + ErrorDescription(li_16) + ". waiting.");
         else {
            Print("orderCloseByReliable(): Permanent Error: " + li_16 + " " + ErrorDescription(li_16) + ". giving up.");
            return (0);
         }
      } else Print("orderCloseByReliable(): Must wait for trade context");
      Sleep(MathRand() / 10);
   }
   return /*(WARN)*/;
}

int f0_22(int ai_0) {
   return (ai_0 == 0 || ai_0 == 2 || ai_0 == 4 || ai_0 == 6 || ai_0 == 132 || ai_0 == 135 || ai_0 == 129 || ai_0 == 136 || ai_0 == 137 || ai_0 == 138 || ai_0 == 128 ||
      ai_0 == 146);
}

int f0_19(string as_0) {
   int li_12;
   int li_16 = 0;
   if (IsTesting()) as_0 = "_" + as_0;
   for (int li_8 = 0; li_8 < StringLen(as_0); li_8++) {
      li_12 = StringGetChar(as_0, li_8);
      li_16 += li_12;
      li_16 = f0_11(li_16, 5);
   }
   for (li_8 = 0; li_8 < StringLen(as_0); li_8++) {
      li_12 = StringGetChar(as_0, li_8);
      li_16 += li_12;
      li_16 = f0_11(li_16, li_12 & 15);
   }
   for (li_8 = StringLen(as_0); li_8 > 0; li_8--) {
      li_12 = StringGetChar(as_0, li_8 - 1);
      li_16 += li_12;
      li_16 = f0_11(li_16, li_16 & 15);
   }
   return (li_16 & EMPTY_VALUE);
}

int f0_11(int ai_0, int ai_4) {
   int li_16 = 1 << ai_4 - 1;
   int li_12 = ai_0 & li_16;
   ai_0 >>= ai_4;
   ai_0 |= li_12 << (32 - ai_4);
   return (ai_0);
}

string f0_28(string as_0) {
   string ls_12;
   string ls_20;
   for (int li_8 = StringFind(as_0, " "); li_8 != -1; li_8 = StringFind(as_0, " ")) {
      ls_12 = StringTrimLeft(StringTrimRight(StringSubstr(as_0, 0, StringFind(as_0, " ", 0))));
      ls_20 = StringTrimLeft(StringTrimRight(StringSubstr(as_0, StringFind(as_0, " ", 0))));
      as_0 = ls_12 + "%20" + ls_20;
   }
   return (as_0);
}

string f0_5(string as_0) {
   gi_112 = 0;
   for (gi_104 = FALSE; gi_112 < 3 && gi_104 == FALSE; gi_112++) {
      if (gi_108 != 0) gi_104 = InternetOpenUrlA(gi_108, as_0, 0, 0, -2079850240, 0);
      if (gi_104 == FALSE) {
         InternetCloseHandle(gi_108);
         gi_108 = InternetOpenA("mymt4InetSession", gi_92, 0, 0, 0);
      }
   }
   gs_116 = "";
   gia_124[0] = 1;
   while (gia_124[0] > 0) {
      InternetReadFile(gi_104, gs_132, 200, gia_124);
      if (gia_124[0] > 0) gs_116 = gs_116 + StringSubstr(gs_132, 0, gia_124[0]);
   }
   InternetCloseHandle(gi_104);
   return (gs_116);
}

string f0_10(string as_0) {
   string ls_8;
   string ls_16;
   f0_13(as_0, ls_8);
   return (f0_5(f0_28("http://www.pimpmyea.com/auth/" + "ReticoloFX_Basket_USD" + "/" + ls_8 + ".html")));
}

void f0_13(string as_0, string &as_8) {
   int li_28;
   int li_32;
   int li_36;
   int li_40;
   int li_44;
   int li_48;
   int li_52;
   int li_16 = 0;
   int li_20 = 0;
   int li_24 = StringLen(as_0);
   while (li_16 < li_24) {
      li_36 = StringGetChar(as_0, li_16);
      li_16++;
      if (li_16 >= li_24) {
         li_32 = 0;
         li_28 = 0;
         li_20 = 2;
      } else {
         li_32 = StringGetChar(as_0, li_16);
         li_16++;
         if (li_16 >= li_24) {
            li_28 = 0;
            li_20 = 1;
         } else {
            li_28 = StringGetChar(as_0, li_16);
            li_16++;
         }
      }
      li_40 = li_36 >> 2;
      li_44 = (li_36 & 3 * 16) | li_32 >> 4;
      li_48 = (li_32 & 15 * 4) | li_28 >> 6;
      li_52 = li_28 & 63;
      as_8 = as_8 + CharToStr(gia_140[li_40]);
      as_8 = as_8 + CharToStr(gia_140[li_44]);
      switch (li_20) {
      case 0:
         as_8 = as_8 + CharToStr(gia_140[li_48]);
         as_8 = as_8 + CharToStr(gia_140[li_52]);
         break;
      case 1:
         as_8 = as_8 + CharToStr(gia_140[li_48]);
         as_8 = as_8 + "=";
         break;
      case 2:
         as_8 = as_8 + "==";
      }
   }
}

int f0_2() {
   if (gt_460 == Time[0]) return (0);
   gt_460 = Time[0];
   return (1);
}